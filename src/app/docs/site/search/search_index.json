{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sieve Documentation","text":"<p>Sieve uses AI agents to perform fast, accurate data extraction from any format such as PDF, image, or video. Data can be seamlessly converted into text, tables, forms, or any other format compatible with your existing workflow. </p> <p>There are 2 options for using using Sieve: UI and API. UI is perfect for users who want to use a simple web interface to submit their requests, rather than writing code. The API is for engineers, developers, and other users who would like to access the product through code, providing the option to integrate Sieve into existing ETL pipelines. </p> <p>See our UI and API quick start guide to get started!</p>"},{"location":"api_guide/","title":"Sieve API Quick Start Guide","text":"<p>This notebook demonstrates how to use the Sieve API to extract structured data from various document types. We'll cover three common use cases:</p> <ol> <li>Extracting data points from a PDF</li> <li>Analyzing financial documents with specific parameters</li> <li>Mapping credit card transactions to merchant stock tickers</li> </ol> <pre><code>import requests\nimport json\nimport time\n\n# API configuration\nBASE_URL = 'https://api.usesieve.com' \n# Authentication credentials\nemail = \"your.email@example.com\"\npassword = \"your_password\"\nuser_type = \"requester\"\nfull_name = \"Tutorial User\"\n</code></pre>"},{"location":"api_guide/#if-you-dont-have-an-account-yet-register-one","title":"If you don't have an account yet, register one","text":"<pre><code>registration_response = requests.post(f\"{BASE_URL}/api/v1/auth/register\", json={\n        \"email\": email,\n        \"password\": password,\n        \"user_type\": user_type,\n        \"full_name\": full_name\n    })\nregistration_response.json()\n</code></pre> <pre><code>{'token': 'eyJhbGciOiAiUlMyNTYiLCAidHlwIjogIkpXVCIsICJraWQiOiAiOTQ0YmZiYzg4MTkwNjY3ZjgwMjllZDRiOWQ4OWZmNGMyMzM1YWY1NSJ9.eyJpc3MiOiAiNTAxNzY0MjgzMTM1LWNvbXB1dGVAZGV2ZWxvcGVyLmdzZXJ2aWNlYWNjb3VudC5jb20iLCAic3ViIjogIjUwMTc2NDI4MzEzNS1jb21wdXRlQGRldmVsb3Blci5nc2VydmljZWFjY291bnQuY29tIiwgImF1ZCI6ICJodHRwczovL2lkZW50aXR5dG9vbGtpdC5nb29nbGVhcGlzLmNvbS9nb29nbGUuaWRlbnRpdHkuaWRlbnRpdHl0b29sa2l0LnYxLklkZW50aXR5VG9vbGtpdCIsICJ1aWQiOiAiN0tLZzA1MXU5c2ZOZEtlbzJFd2dqT3JHNkV4MiIsICJpYXQiOiAxNzM5OTgxODQ4LCAiZXhwIjogMTczOTk4NTQ0OH0.kiLTVP6SRJSbNJH1HQ3BtDKMNfOUneRWModCwz22O5B4wKMS51TmfJMUlgdAc6eFUB1Jbp2tQjb7fY3s4MOwl4TnV1UCQ18BH0-b3wJh6bad0DXtSKbTIADvKkvJtJupGxWf5ErCV3lw6XN9npz4cukngw_-YGrj4YXd97tPnMjZxXG6GPEwxGEF5keQjyLdO2e5T35tUGnXcI-TzNtLQUenyo_3LF31vAPwJl2Oz7f6mLpeejQPcwvmN1Pj9DggiUSiuQLPgB7njShcSlebiOwoEqW38X3UfcM0-03GGYdPuJuQ7THvbfks1HGFFQzqIMX4nHGF21rq3CymmqMHaw',\n 'user_id': '7KKg051u9sfNdKeo2EwgjOrG6Ex2',\n 'user_type': 'requester'}\n</code></pre>"},{"location":"api_guide/#if-you-have-an-account-log-in-to-get-an-authentication-token","title":"If you have an account, log in to get an authentication token","text":"<pre><code>login_result = requests.post(f\"{BASE_URL}/api/v1/auth/login\", json={\n        \"email\": email,\n        \"password\": password\n    })\nif login_result.status_code == 200:\n    print(\"Login successful!\")\nelif login_result.status_code != 200:\n    print(\"Login failed. Check your credentials again.\")\n# Save the token for future API calls\ntoken = login_result.json().get('token')\n# Set the token in your header\nheaders = {\n    'Authorization': f'Bearer {token}',\n    'Content-Type': 'application/json'\n}\n</code></pre> <pre><code>Login successful!\n</code></pre>"},{"location":"api_guide/#helper-functions","title":"Helper Functions","text":"<p>Let's define some helper functions to interact with the API and check job status.</p> <pre><code>def submit_job(document_type, content, metadata=None):\n    url = f'{BASE_URL}/process'\n    payload = {\n        'document_type': document_type,\n        'content': content,\n        'metadata': metadata or {}\n    }\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    return response.json()\n\ndef check_job_status(job_id):\n    url = f'{BASE_URL}/status/{job_id}'\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    return response.json()\n\ndef wait_for_completion(job_id, max_attempts=30, delay=60):\n    for _ in range(max_attempts):\n        status = check_job_status(job_id)\n        if status['status'] == 'completed':\n            return status\n        elif status['status'] == 'failed':\n            raise Exception(f'Job failed: {status.get(\"error\", \"Unknown error\")}')\n        time.sleep(delay)\n    raise TimeoutError('Job did not complete within the expected time')\n</code></pre>"},{"location":"api_guide/#example-1-extract-data-from-pdf","title":"Example 1: Extract Data from PDF","text":"<p>Let's extract specific data points from a PDF document.</p> <pre><code>response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={\n    \"document_type\": \"pdf\",\n    \"metadata\": {\n        \"url\": \"https://www.cecafe.com.br/site/wp-content/uploads/2023/03/CECAFE-Monthly-Coffee-Report-JANUARY-2025.pdf\",\n        'data_points': ['Coffee export volume in most recent period (USD)']\n    }\n})\nresponse.raise_for_status()\njob_id = response.json().get(\"job_id\")\nprint(\"job id: \", job_id)\n\n# # Wait for completion and get results\n# final_result = wait_for_completion(result['job_id'])\n# print(json.dumps(final_result, indent=2))\n</code></pre> <pre><code>job id:  t1mPRc2JtlCKYtia1uPg\n</code></pre>"},{"location":"api_guide/#check-for-results","title":"Check for results","text":"<pre><code>url = f'{BASE_URL}/api/v1/status/{job_id}'\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()\nresponse.json()\nprint(\"status:\", response.json().get(\"status\"))\nif response.json().get(\"status\") == \"completed\":\n    print(\"response:\", response.json().get(\"ai_result\").get(\"result\"))\n</code></pre> <pre><code>status: completed\nresponse: {'Coffee export volume in most recent period (USD)': '1,315,849.2'}\n</code></pre>"},{"location":"api_guide/#example-2-financial-document-analysis","title":"Example 2: Financial Document Analysis","text":"<p>Extract specific financial data points from SEC filings or other financial documents.</p> <pre><code>response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={\n    \"document_type\": \"sec\",\n    \"content\": \"None\",\n    \"metadata\": {\n        'ticker': 'AAPL',\n        'metrics': [\"geographic distribution of revenue\"]\n    }\n})\nresponse.raise_for_status()\njob_id = response.json().get(\"job_id\")\nprint(\"job id: \", job_id)\n</code></pre> <pre><code>job id:  5pwVuIuEm3ybBvTBBHcx\n</code></pre> <pre><code>url = f'{BASE_URL}/api/v1/status/{job_id}'\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()\nresponse.json()\nprint(\"status:\", response.json().get(\"status\"))\nif response.json().get(\"status\") == \"completed\":\n    print(\"response:\", response.json().get(\"ai_result\").get(\"result\"))\n</code></pre> <pre><code>status: completed\nresponse: {'revenue_by_geography': None}\n</code></pre>"},{"location":"api_guide/#example-3-credit-card-transaction-mapping","title":"Example 3: Credit Card Transaction Mapping","text":"<p>Map a credit card transaction description to a merchant's stock ticker.</p> <pre><code>response = requests.post(f'{BASE_URL}/api/v1/process', headers=headers, json={\n    \"document_type\": \"credit_card\",\n    \"metadata\" : {\n        \"transaction\": \"WHOLEFDS MKT 10259 AUSTIN TX\",\n        'transaction_date': '2024-01-15',\n        'amount': 156.78,\n        \"data_points\": [\"merchant stock ticker\"]\n    }\n})\nresponse.raise_for_status()\njob_id = response.json().get(\"job_id\")\nprint(\"job id: \", job_id)\n</code></pre> <pre><code>job id:  synGikSyt7Tpiag6S6OE\n</code></pre> <pre><code># Wait for completion and get results\nfinal_result = wait_for_completion(result['job_id'])\nprint(json.dumps(final_result, indent=2))\n</code></pre>"},{"location":"ui_guide/","title":"Sieve UI Quick Start Guide","text":"<p>This document demonstrates how we can use Sieve's simple UI to extract structured data from various document types. We'll cover how to register, login, and perform a data request. </p> <p>We will cover an example use case which requests a data point from a PDF document, using Nvidia's latest 10-K report as an example.</p>"},{"location":"ui_guide/#if-you-dont-have-an-account-yet-register-one","title":"If you don't have an account yet, register one","text":"<p>In your browser, navigate to app.usesieve.com, then click on the Register tab. You should see the following screen. </p> <p>Enter your preferred email, password, and full name. Under User Type make sure you select <code>requester</code> so you can submit data augmentation requests. See example below. </p> <p></p>"},{"location":"ui_guide/#log-in-to-access-the-ui","title":"Log in to access the UI","text":"<p>If you have registered, click on the Login tab and enter your username and password that you have registered. Click the Login button to access the product. After you have logged in, you should see the following screen:</p> <p></p>"},{"location":"ui_guide/#extract-data-from-pdf-nvidia-10-k","title":"Extract Data From PDF--Nvidia 10-K","text":""},{"location":"ui_guide/#submit-request","title":"Submit Request","text":"<p>Now you are ready to start using Sieve! Let's extract specific data points from a PDF document. In this example, we will extract gaming revenue from Nvidia's 10k report for the fiscal year ending January 26, 2025. </p> <p>To sumbit this request, we will leave \"Document Type\" set to <code>pdf</code>.</p> <p>Paste Nvidia's 10-K URL, shown below, into the PDF URL field. </p> <p><pre><code>https://s201.q4cdn.com/141608511/files/doc_financials/2025/q4/177440d5-3b32-4185-8cc8-95500a9dc783.pdf\n</code></pre> Under Data Points to Extract, add the text <code>Gaming Revenue for year ending Jan 26, 2025 in USD</code>. Click Submit. You should see the page load for a few seconds before it confirms that the document has been submitted for processing. The example request is shown below. </p> <p></p>"},{"location":"ui_guide/#get-result","title":"Get result","text":"<p>Now that you have submitted a request, the data point is being identified by AI and validated by data professionals. You can watch for your result by clicking on the Request Hisory tab and pressing the Refresh button. Once the data has been retrieved, the status will be updated to complete and the data will be available under Results.</p> <p></p>"}]}